<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
                    http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 把UserDaoImpl的配置进来，变成spring管理的bean -->
    <bean id="userDao" class="com.fei.dao.impl.UserDaoImpl"></bean>

    <!--
        Bean标签的基本配置
            该配置对象是由Spring来创建
            【注意】Spring调用的是类中的无参构造方法，如果你类里面没有无参，那么就会创建失败
            基本属性
                id：bean实例在spring容器的唯一标识
                class：Bean的全限定名

        【Bean标签的范围】
            scope:对象的作用范围，其实也是bean标签的范围
                singleton  默认的  单例
                prototype   多例
                request web项目中，Spring创建的一个bean对象，将对象放在request域中
                session web项目中，Spring创建的一个bean对象，将对象放在session域中
                global session  web项目中，放到了Portlet环境里


                当scope=singleton
                    bean的实例化个数：1个
                    bean什么时候实例化：当Spring容器核心文件加载的时候，实例化配置bean实例
                    bean的生命周期：
                                对象创建：当应用启动，加载核心配置，创建容器了，对象就会被加载
                                对象运行：只要容器一直在，对象就一直活着
                                对象销毁：当应用卸载了，容器销毁了，对象就跟着殉情了

                当scope=prototype
                    bean的实例化个数：多个
                    bean什么时候实例化：当调用getBean()的时候，才实例化Bean对象
                    bean的生命周期：
                                对象创建：当使用对象的时候，就创建新的对象实例
                                对象运行：只要对象一直在使用，那么对象就一直或者
                                对象销毁：当对象长时间不使用了，对象就会被Java的垃圾回收装置回收掉
            【Bean生命周期配置】
                init-method：指定类中的初始化方法名称
                destroy-method：指定类中销毁方法的名称
            【Bean实例化的三种方式】
                1. 使用无参构造方法实例化
                    <bean id="userDao" class="com.fei.dao.impl.UserDaoImpl"></bean>

                2. 工厂静态方法实例化
                    工厂的静态方法来给你返回一个Bean实例
                3. 工厂方法实例化


            【Bean的依赖注入概念】
                依赖注入[Dependency Injection]：是Spring框架的核心IOC的具体实现
                    编写程序的时候，通过控制反转，将对象的创建交给了Spring，但是代码中不可能出现没有依赖的情况
                    IOC解耦只是较低了他们之间的依赖关系，但不会消除，比如刚才的代码中，业务层仍然会调用持久层的方法
                    所以，当前的这种依赖关系，是在使用Spring之后，由Spring来进行维护
                    总之，就是等框架把持久层对象传入业务层，而不需要我们自己去创建获取
             【依赖注入的方式】
                1. 有参构造注入的方式

    -->

    <bean id="userDao1" class="com.fei.factory.StaticBeanFactory"></bean>

    <bean id="factoryBean" class="com.fei.factory.DynamicBeanFactory"></bean>
    <bean id="userDao2" factory-bean="factoryBean" factory-method="createUserDao"></bean>


    <!-- 将UserServiceImpl的创建权交给Spring -->
    <bean id="userService" class="com.fei.service.impl.UserServiceImpl"></bean>


</beans>