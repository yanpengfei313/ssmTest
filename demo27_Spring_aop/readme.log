Spring之AOP的相关概念
    1. 什么是AOP
        aop，全程叫做面向切面编程，主要就是在不改变原有代码的情况下，对我们的已有的方法进行增强或相关业务插入
        说白了，就是把我们程序中重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，进行增强
    2. AOP的作用
        在程序运行期间，不修改源码对自己的已有方法进行增强
    3. AOP的优势
        减少重复代码
        提高开发效率
        维护方便
    4. AOP的实现原理
        使用的动态代理的技术
            1. JDK动态代理: 必须需要接口[基于接口的动态代理技术]
            2. cglib动态代理,不需要接口,只需要类就可以[基于父类的动态代理技术]

[Spring中的AOP相关的术语]
    1. joinPoint[连接点]
        所有可以被增强的方法都属于连接点,早Spring的AOP中,表示的所有业务层的类里面的所有的方法都属于连接点
    2. Pointcut[切入点]
        具体已经被增强的方法就是切入点,类里面有很多方法,并不是每一个方法我们都需要增强,我们指挥对其中的几个方法进行增强,那么这几个增强的方法就叫做切入点
    3. Advice[通知与增强]
        具体于增强的方法的代码
            增强其实就是给方法扩展功能,比如效验,日志等等,所以我们也称之为是给方法增强,或者加一个通知
            通知的分类
                前置通知,在被增强方法之前执行的
                后置通知,在被增强方法之后执行的,特点: 可以得到被增强方法的返回值
                异常通知,子啊被增强方法执行出现异常的时候执行,如果没有异常则不会执行,特点,可以获取异常的信息
                最终通知,无论被增强方法有没有异常,总是会被执行的
                环绕通知,在方法之前和方法之后执行的,特点: 可以组织目标方法执行
    4. Aspect[切面]
        所有的通知都是在切面中进行的



        void saveUser();    // 连接点1[切入点1]

        void deleteUser();  // 连接点2

        void updateUser();  // 连接点3[切入点2]

        User findUser();    // 连接点4

        public class my{
            public void check(){
                日志打印
            }
        }